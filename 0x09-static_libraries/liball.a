!<arch>
0-isupper.c/    0           0     0     644     253       `
#include "main.h"
#include <stdio.h>

/**
 * _isupper - return upper and lowecase letter
 *
 * @c: charcter argment
 * Return: 1 for uppercase and 0 for lowercase
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);

	else
		return (0);

}

0-memset.c/     0           0     0     644     284       `
#include "main.h"
/**
 * _memset - set constatant bytes
 * @s: memory pointer
 * @n: number of bytes to be set
 * @b: value to be set
 * Return: return s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     423       `
#include "main.h"

/**
 * _strcat - concatonate 2 sring
 * @dest: destiniation string
 * @src: source string
 * Return: estination string
 */


char *_strcat(char *dest, char *src)
{
	char destlen;
	char srclen;
	int i;

	destlen = 0;
	srclen = 0;

	for (i = 0; dest[i] != '\0'; i++)
		destlen++;
	for (i = 0; src[i] != '\0'; i++)
		srclen++;
	for (i = 0; i <= srclen; i++)
		dest[destlen + i] = src[i];
	return (dest);

}

1-isdigit.c/    0           0     0     644     212       `
#include "main.h"
/**
 * _isdigit - checks for digit
 * @c: character argument
 * Return: 1 if its a number or 0 otherwise
 */


int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     300       `
#include "main.h"

/**
 * _memcpy - copy from src to dest
 * @n: number of bytes to be copied
 * @src: copy source
 * @dest: destination
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     493       `
#include "main.h"
/**
 * _strncat - function that concatenates two strings
 * @src: source string
 * @dest: destination string
 * @n: number to be concatonated
 * Return: destination string
 */
char *_strncat(char *dest, char *src, int n)
{
	char destlen;
	char srclen;
	int i;

	destlen = 0;
	srclen = 0;


	for (i = 0; dest[i] != '\0'; i++)
		destlen++;
	for (i = 0; src[i] != '\0'; i++)
		srclen++;
	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[destlen + i] = src[i];
	return (dest);
}

100-atoi.c/     0           0     0     644     482       `
#include "main.h"
/**
 * _atoi - function which convert string into an integer
 * @s: taken string as parameter
 * Return: a string converted to an integer with consideration of sign
 */

int _atoi(char *s)
{
	int sign;
	int result;

	sign = 1;
	result = 0;

	while (*s == ' ')
	{
		s++;
	}

	if (*s == '-' || *s == '+')
	{
		if (*s == '-')
		{
			sign = -1;
		}
		s++;
	}
	while (*s >= '0' && *s <= '9')
	{
		result = result * 10 + (*s - '0');
		s++;
	}
	return (sign * result);
}
2-strchr.c/     0           0     0     644     290       `
#include "main.h"
#include "stddef.h"
/**
 * _strchr - locates character in the string
 * @s: string
 * @c: character to locate
 * Return: c else Null
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}
	return (NULL);
}
2-strlen.c/     0           0     0     644     277       `
#include "main.h"

/**
 * _strlen - function returning the length of the string
 * @s: input which return the length of the string as an integer
 * Return: length of a string
 */

int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}
	return (len);
}

2-strncpy.c/    0           0     0     644     358       `
#include "main.h"
/**
 * _strncpy - copy from src to dest
 * @dest: destination string
 * @src: source string
 * @n: number of string
 * Return: destination string
 */


char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for ( ; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     223       `
#include "main.h"
/**
 * _islower - function returning lower number
 * Return: 1 if lowercase else 0
 * @c: any character to be printed
 */

int _islower(int c)
{
	if (c > 97 && c < 122)
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     247       `
#include "main.h"
/**
 * _puts - function printing a string followed by a new line
 * @str: a string to be printed out in stdout
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     366       `
#include "main.h"

/**
 * _strcmp - compare strings
 * @s1: string
 * @s2: strings
 * Return: always 0
 */


int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			if (s1[i] < s2[i] || (s1[i] > s2[i]))
			{
				return (s1[i] - s2[i]);
			}
			else
			{
				return (0);
			}
		}
	}
	return (0);
}
3-strspn.c/     0           0     0     644     394       `
#include "main.h"
/**
 * _strspn - calculate length of a string
 * @s: initial segment
 * @accept: input
 * Return: n
 */



unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
			{
				return (n);
			}
		}
		s++;
	}
	return (n);
}
4-isalpha.c/    0           0     0     644     292       `
#include "main.h"

/**
 * _isalpha - function returning lower and uppercase letter
 * @c: any character to be printed
 * Return: 1 if it's true else 0
 */
int _isalpha(int c)
{
	if (c > 64 && c < 90)
	{
		return (1);
	}
	else if (c > 96 && c < 122)
	{
		return (1);
	}
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     364       `
#include "main.h"
#include <stddef.h>

/**
 * _strpbrk - search for set of bytes in a string
 * @s: string
 * @accept: input
 * Return: pinters s or null
 */

char *_strpbrk(char *s, char *accept)
{
	int i;
	int j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				return (s + i);
		}
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     390       `
#include "main.h"
#include <stddef.h>

/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: always 0 (seccess)
 */

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *i = haystack;
		char *p = needle;

		while (*i == *p && *p != '\0')
		{
			i++;
			p++;
		}
		if (*p == '\0')
			return (haystack);
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     212       `
#include "main.h"
/**
 * _abs - functionto return the absolute value
 * @a: parameter
 * Return: always positive number
 */



int _abs(int a)
{

	if (a < 0)
		a = -(a);
	else if (a >= 0)
		a = a;
	return (a);
}
9-strcpy.c/     0           0     0     644     280       `
#include "main.h"
/**
 * _strcpy - copy a string
 * @dest: destination value
 * @src: source value
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i++] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
		return (write(1, &c, 1));
}
main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
